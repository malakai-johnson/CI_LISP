Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | f_expr
    4       | LPAREN let_section s_expr RPAREN
    5       | LPAREN COND s_expr s_expr s_expr RPAREN
    6       | SYMBOL
    7       | QUIT
    8       | error

    9 s_expr_list: s_expr s_expr_list
   10            | s_expr

   11 number: INT
   12       | DOUBLE

   13 f_expr: LPAREN FUNC s_expr_list RPAREN
   14       | LPAREN FUNC RPAREN
   15       | LPAREN SYMBOL s_expr_list RPAREN

   16 let_section: LPAREN let_list RPAREN

   17 let_list: LET let_elem
   18         | let_list let_elem

   19 let_elem: LPAREN SYMBOL s_expr RPAREN
   20         | LPAREN type SYMBOL s_expr RPAREN
   21         | LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   22         | LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   23 arg_list: SYMBOL arg_list
   24         | SYMBOL

   25 type: TYPE


Terminals, with rules where they appear

$end (0) 0
error (256) 8
FUNC (258) 13 14
SYMBOL (259) 6 15 19 20 21 22 23 24
TYPE (260) 25
INT (261) 11
DOUBLE (262) 12
LPAREN (263) 4 5 13 14 15 16 19 20 21 22
RPAREN (264) 4 5 13 14 15 16 19 20 21 22
LET (265) 17
COND (266) 5
LAMBDA (267) 21 22
EOL (268) 1
QUIT (269) 7


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1, on right: 0
s_expr (17)
    on left: 2 3 4 5 6 7 8, on right: 1 4 5 9 10 19 20 21 22
s_expr_list (18)
    on left: 9 10, on right: 9 13 15
number (19)
    on left: 11 12, on right: 2
f_expr (20)
    on left: 13 14 15, on right: 3
let_section (21)
    on left: 16, on right: 4
let_list (22)
    on left: 17 18, on right: 16 18
let_elem (23)
    on left: 19 20 21 22, on right: 17 18
arg_list (24)
    on left: 23 24, on right: 21 22 23
type (25)
    on left: 25, on right: 20 21


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


state 1

    8 s_expr: error .

    $default  reduce using rule 8 (s_expr)


state 2

    6 s_expr: SYMBOL .

    $default  reduce using rule 6 (s_expr)


state 3

   11 number: INT .

    $default  reduce using rule 11 (number)


state 4

   12 number: DOUBLE .

    $default  reduce using rule 12 (number)


state 5

    4 s_expr: LPAREN . let_section s_expr RPAREN
    5       | LPAREN . COND s_expr s_expr s_expr RPAREN
   13 f_expr: LPAREN . FUNC s_expr_list RPAREN
   14       | LPAREN . FUNC RPAREN
   15       | LPAREN . SYMBOL s_expr_list RPAREN

    FUNC    shift, and go to state 11
    SYMBOL  shift, and go to state 12
    LPAREN  shift, and go to state 13
    COND    shift, and go to state 14

    let_section  go to state 15


state 6

    7 s_expr: QUIT .

    $default  reduce using rule 7 (s_expr)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 16


state 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 17


state 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


state 10

    3 s_expr: f_expr .

    $default  reduce using rule 3 (s_expr)


state 11

   13 f_expr: LPAREN FUNC . s_expr_list RPAREN
   14       | LPAREN FUNC . RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 18
    QUIT    shift, and go to state 6

    s_expr       go to state 19
    s_expr_list  go to state 20
    number       go to state 9
    f_expr       go to state 10


state 12

   15 f_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr       go to state 19
    s_expr_list  go to state 21
    number       go to state 9
    f_expr       go to state 10


state 13

   16 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 22

    let_list  go to state 23


state 14

    5 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 24
    number  go to state 9
    f_expr  go to state 10


state 15

    4 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 25
    number  go to state 9
    f_expr  go to state 10


state 16

    0 $accept: program $end .

    $default  accept


state 17

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 18

   14 f_expr: LPAREN FUNC RPAREN .

    $default  reduce using rule 14 (f_expr)


state 19

    9 s_expr_list: s_expr . s_expr_list
   10            | s_expr .

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    RPAREN  reduce using rule 10 (s_expr_list)

    s_expr       go to state 19
    s_expr_list  go to state 26
    number       go to state 9
    f_expr       go to state 10


state 20

   13 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 27


state 21

   15 f_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 28


state 22

   17 let_list: LET . let_elem

    LPAREN  shift, and go to state 29

    let_elem  go to state 30


state 23

   16 let_section: LPAREN let_list . RPAREN
   18 let_list: let_list . let_elem

    LPAREN  shift, and go to state 29
    RPAREN  shift, and go to state 31

    let_elem  go to state 32


state 24

    5 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 33
    number  go to state 9
    f_expr  go to state 10


state 25

    4 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 34


state 26

    9 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 9 (s_expr_list)


state 27

   13 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 13 (f_expr)


state 28

   15 f_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 15 (f_expr)


state 29

   19 let_elem: LPAREN . SYMBOL s_expr RPAREN
   20         | LPAREN . type SYMBOL s_expr RPAREN
   21         | LPAREN . type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   22         | LPAREN . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 35
    TYPE    shift, and go to state 36

    type  go to state 37


state 30

   17 let_list: LET let_elem .

    $default  reduce using rule 17 (let_list)


state 31

   16 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 16 (let_section)


state 32

   18 let_list: let_list let_elem .

    $default  reduce using rule 18 (let_list)


state 33

    5 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 38
    number  go to state 9
    f_expr  go to state 10


state 34

    4 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 4 (s_expr)


state 35

   19 let_elem: LPAREN SYMBOL . s_expr RPAREN
   22         | LPAREN SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    LAMBDA  shift, and go to state 39
    QUIT    shift, and go to state 6

    s_expr  go to state 40
    number  go to state 9
    f_expr  go to state 10


state 36

   25 type: TYPE .

    $default  reduce using rule 25 (type)


state 37

   20 let_elem: LPAREN type . SYMBOL s_expr RPAREN
   21         | LPAREN type . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 41


state 38

    5 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 42


state 39

   22 let_elem: LPAREN SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 43


state 40

   19 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 44


state 41

   20 let_elem: LPAREN type SYMBOL . s_expr RPAREN
   21         | LPAREN type SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    LAMBDA  shift, and go to state 45
    QUIT    shift, and go to state 6

    s_expr  go to state 46
    number  go to state 9
    f_expr  go to state 10


state 42

    5 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 5 (s_expr)


state 43

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 47

    arg_list  go to state 48


state 44

   19 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 19 (let_elem)


state 45

   21 let_elem: LPAREN type SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 49


state 46

   20 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 50


state 47

   23 arg_list: SYMBOL . arg_list
   24         | SYMBOL .

    SYMBOL  shift, and go to state 47

    $default  reduce using rule 24 (arg_list)

    arg_list  go to state 51


state 48

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 52


state 49

   21 let_elem: LPAREN type SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 47

    arg_list  go to state 53


state 50

   20 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 20 (let_elem)


state 51

   23 arg_list: SYMBOL arg_list .

    $default  reduce using rule 23 (arg_list)


state 52

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 54
    number  go to state 9
    f_expr  go to state 10


state 53

   21 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 55


state 54

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 56


state 55

   21 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 57
    number  go to state 9
    f_expr  go to state 10


state 56

   22 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 22 (let_elem)


state 57

   21 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 58


state 58

   21 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 21 (let_elem)
